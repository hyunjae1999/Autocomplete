import java.awt.List;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.PriorityQueue;
/**
 * 
 * Using a sorted array of Term objects, this implementation uses binary search
 * to find the top term(s).
 *
 **/
public class BinarySearchAutocomplete implements Autocompletor {
	Term[] myTerms;
	/**
	 * Given arrays of words and weights, initialize myTerms to a corresponding
	 * array of Terms sorted lexicographically.
	 * 
	 * This constructor is written for you, but you may make modifications to it.
	 * 
	 * @param terms
	 *            - A list of words to form terms from
	 * @param weights
	 *            - A corresponding list of weights, such that terms[i] has
	 *            weight[i].
	 * @return a BinarySearchAutocomplete whose myTerms object has myTerms[i] = a
	 *         Term with word terms[i] and weight weights[i].
	 * @throws a
	 *             NullPointerException if either argument passed in is null
	 * @throws IllegalArgumentException
	 *             if terms and weights are different length
	 */
	/*
	 * Constructor that throws appropriate exceptions based on if the given term array and/or weight array
	 * are null. Also, if the term array and weight array are different lengths, or if the term array has
	 * duplicate terms, or if any weights are negative, will throw exception. Otherwise, creates Term array myTerms
	 * and fills it with strings terms and doubles weights. Sorts this Term array.
	 */
	public BinarySearchAutocomplete(String[] terms, double[] weights) {
		if (terms == null || weights == null) {
			throw new NullPointerException("One or more arguments null");
		}
		if(terms.length!=weights.length)
			throw new IllegalArgumentException("Terms and weights different lengths");
		
		myTerms = new Term[terms.length];
		HashSet<String> words = new HashSet<String>();
		for (int i = 0; i < terms.length; i++) {
			words.add(terms[i]);
			myTerms[i] = new Term(terms[i], weights[i]);
		if(weights[i]<0)
			throw new IllegalArgumentException("Negative weight " + weights[i]);
		}
		if (words.size() != terms.length) 
			throw new IllegalArgumentException("Duplicate input terms");
		Arrays.sort(myTerms);
	}
	/**
	 * Uses binary search to find the index of the first Term in the passed in array
	 * which is considered equivalent by a comparator to the given key. This method
	 * should not call comparator.compare() more than 1+log n times, where n is the
	 * size of a.
	 * 
	 * @param a
	 *            - The array of Terms being searched
	 * @param key
	 *            - The key being searched for.
	 * @param comparator
	 *            - A comparator, used to determine equivalency between the values
	 *            in a and the key.
	 * @return The first index i for which comparator considers a[i] and key as
	 *         being equal. If no such index exists, return -1 instead.
	 */
	/*
	 * Finds the first index of the given array a at which the term at that index matches the key term. Uses binary search by checking
	 * which side of the midpoint the key is on and redefining high/low based on which side the matching term is. Once the high
	 * and low indeces are one apart, will return the high index if the term there matches key. If no such index exists, returns -1.
	 */
	public static int firstIndexOf(Term[] a, Term key, Comparator<Term> comparator) {
		// TODO: Implement firstIndexOf
		if(a.length==0)
			return -1;
		int low=-1;
		int high=a.length-1;
		int mid;
		while(low+1!=high) {
			mid=(low+high)/2;
			int comp=comparator.compare(a[mid],key);
			if(comp==0) {
				high=mid;
			}
			else if(comp<0)
				low=mid;
			else if(comp>0)
				high=mid;
		}
			if(comparator.compare(key, a[high])==0)
				return high;
		
		return -1;
	}
	/**
	 * The same as firstIndexOf, but instead finding the index of the last Term.
	 * 
	 * @param a
	 *            - The array of Terms being searched
	 * @param key
	 *            - The key being searched for.
	 * @param comparator
	 *            - A comparator, used to determine equivalency between the values
	 *            in a and the key.
	 * @return The last index i for which comparator considers a[i] and key as being
	 *         equal. If no such index exists, return -1 instead.
	 */
	/*
	 * Finds the last index of the given array a at which the term at that index matches the key term. Uses binary search by checking
	 * which side of the midpoint the key is on and redefining high/low based on which side the matching term is. Once the high
	 * and low indeces are one apart, will return the low index if the term there matches key. If no such index exists, returns -1.
	 */
	public static int lastIndexOf(Term[] a, Term key, Comparator<Term> comparator) {
		// TODO: Implement lastIndexOf
		if(a.length==0)
			return -1;
		int low=0;
		int high=a.length;
		int mid;
		while(low+1!=high) {
			mid=(low+high)/2;
			int comp=comparator.compare(key,a[mid]);
			if(comp==0) {
				low=mid;
			}
			else if(comp>0)
				low=mid;
			else if(comp<0)
				high=mid;
		}
		if(comparator.compare(key,a[low])==0)
			return low;
		return -1;
	}
	/**
	 * Required by the Autocompletor interface. Returns an array containing the k
	 * words in myTerms with the largest weight which match the given prefix, in
	 * descending weight order. If less than k words exist matching the given prefix
	 * (including if no words exist), then the array instead contains all those
	 * words. e.g. If terms is {air:3, bat:2, bell:4, boy:1}, then topKMatches("b",
	 * 2) should return {"bell", "bat"}, but topKMatches("a", 2) should return
	 * {"air"}
	 * 
	 * @param prefix
	 *            - A prefix which all returned words must start with
	 * @param k
	 *            - The (maximum) number of words to be returned
	 * @return An array of the k words with the largest weights among all words
	 *         starting with prefix, in descending weight order. If less than k such
	 *         words exist, return an array containing all those words If no such
	 *         words exist, reutrn an empty array
	 * @throws a
	 *             NullPointerException if prefix is null
	 */	
	/*
	 * Given a prefix and integer k, this method returns a linked list that contains in descending order the top k 
	 * words that match the given prefix.
	 */
	public Iterable<String> topMatches(String prefix, int k) {
		// TODO: Implement topMatches
		if(prefix==null)
			throw new NullPointerException("Prefix is null");
		if(k==0)
			return new LinkedList<String>();
		PriorityQueue<Term> pq = new PriorityQueue<Term>(k, new Term.WeightOrder());
		int m=firstIndexOf(myTerms, new Term(prefix, 0), new Term.PrefixOrder(prefix.length()));
		int j=lastIndexOf(myTerms, new Term(prefix,0), new Term.PrefixOrder(prefix.length()));
		if(m>=0&&j>=0) {
			for(int i=m; i<=j; i++) {
				Term t=myTerms[i];
				pq.add(t);
				if(pq.size()>k)
					pq.remove();
			}
		}
		LinkedList<String> myList = new LinkedList<String>();
		while(pq.size()>0) {
			myList.addFirst(pq.remove().getWord());
		}
		return myList;
	}
	/**
	 * Given a prefix, returns the largest-weight word in myTerms starting with that
	 * prefix. e.g. for {air:3, bat:2, bell:4, boy:1}, topMatch("b") would return
	 * "bell". If no such word exists, return an empty String.
	 * 
	 * @param prefix
	 *            - the prefix the returned word should start with
	 * @return The word from myTerms with the largest weight starting with prefix,
	 *         or an empty string if none exists
	 * @throws a
	 *             NullPointerException if the prefix is null
	 * 
	 */
	/*
	 * With a given prefix, returns word that matches that prefix and contains the largest weight. 
	 */
	public String topMatch(String prefix) {
		// TODO: Implement topMatch
		if(prefix==null)
			throw new NullPointerException("null prefix");
		String maxTerm = "";
		double maxWeight=0.0;
		int m=firstIndexOf(myTerms, new Term(prefix, 0), new Term.PrefixOrder(prefix.length()));
		int j=lastIndexOf(myTerms, new Term(prefix,0), new Term.PrefixOrder(prefix.length()));
		
		if(m < 0){
			return maxTerm;
		}
		
		for(int i=m; i<=j; i++) {
			if(myTerms[i].getWeight()>maxWeight) {
				maxWeight=myTerms[i].getWeight();
				maxTerm=myTerms[i].getWord();
			}
		}
		return maxTerm;
	}
	/**
	 * Return the weight of a given term. If term is not in the dictionary, return
	 * 0.0
	 */
	/*
	 *Returns weight of term in myTerms that matches the given string.  
	 */
	public double weightOf(String term) {
		// TODO complete weightOf
		int i=firstIndexOf(myTerms, new Term(term, 0), new Term.PrefixOrder(term.length()));
		double weight=0.0;
		if(i>=0) {
			weight=myTerms[i].getWeight();
		}
		return weight;
	}
}
